#!/usr/bin/env python

#  MIT License
#
#  Copyright (C) 2022  David King <dave@daveking.com>
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.

#  Automate WordPress Facebook profile posting

#  Set log level, systemd service's log output written to stdout ends up in syslog
import logging
logging.basicConfig(encoding='utf-8', level=logging.INFO, format='%(message)s')

import socket
import http.server
import json
import os

#  Import Python API for Selenium browser test automation.
#  On Fedora, install the "python3-selenium" package and do
#  "pip install geckodriver_autoinstaller" if you don't already have
#  these things installed.
try:
	from selenium import webdriver
	from selenium.webdriver.support import expected_conditions as EC
	from selenium.webdriver.support.ui import WebDriverWait
	from selenium.webdriver.common.by import By
	import geckodriver_autoinstaller
except:
	logging.exception('There was a problem importing the Python modules for Selenium.  Are they installed? (pip install selenium geckodriver_autoinstaller)', exc_info=True)
	exit(1)
	
#  Stolen from https://github.com/Spindel/systemd-socketactivation/blob/master/httpd-true
#  which shows how to define a HTTPServer object that inherits the systemd socket
#  rather than trying to bind to one of it's own.
class HTTPServerWithInheritedSocket(http.server.HTTPServer):
	def __init__(self, address_info, handler, bind_and_activate=True):
		# Note that we call HTTPServer with bind_and_activate = False.
		http.server.HTTPServer.__init__(self, address_info, handler, bind_and_activate=False)
		#  Bind to the socket passed to use by systemd (see fbpost.socket)
		self.socket = socket.fromfd(3, http.server.HTTPServer.address_family, http.server.HTTPServer.socket_type)	
		if bind_and_activate:
			self.server_activate()

#  The HTTPServer request handler that makes the Facebook post using the 
#  request data passed to it.
class postHandler(http.server.BaseHTTPRequestHandler):
	def do_POST(request):
		logging.info('received a request')
			
		try:
			length = int(request.headers['content-length'])
			post = json.loads(request.rfile.read(length))
			logging.info(json.dumps(post, indent=4))
			if not post['post_permalink'].startswith(os.environ['URLROOT']):
				logging.error('Ignoring request, permalink does not validate: {}'.format(post['post_permalink']))
				request.send_error(400, message='Invalid permalink in request data')
				return
		except:
			logging.exception('Unable to get post data from HTTP request', exc_info=True)
			request.send_error(500, 'Unable to get post data from HTTP request')
		
		#  Construct post message
		try:
			fb_post = 'New post on my blog:\n{}\n'.format(post['post_permalink'])
		except:
			logging.exception('Unable to build message for posting', exc_info=True)
			request.send_error(500, 'Unable to build message for posting')
			return

		#  Initialize Selenium and open browser session
		try:
			geckodriver_autoinstaller.install() 
			driver = webdriver.Firefox()
			wait = WebDriverWait(driver, 15)
		except:
			logging.exception('Exception while initializing Selenium browser automation session', exc_info=True)
			request.send_error(500, 'Exception while initializing Selenium browser automation session')
			return
			
		#  Log into Facebook
		try:
			driver.get('https://m.facebook.com/')
			userid_input = driver.find_element(By.XPATH, '//*[@id="m_login_email"]')
			userid_input.send_keys(os.environ['FBUSERID'])
			password_input = driver.find_element(By.XPATH, '//*[@id="m_login_password"]')
			password_input.send_keys(os.environ['FBPASSWD'])
			login_btn = driver.find_element(By.XPATH,'/html/body/div[1]/div/div[2]/div[1]/div/div/div[2]/div/div[3]/form/div[5]/div[1]/button')
			login_btn.click()
			wait.until(EC.url_changes('https://m.facebook.com/'))
		except:
			logging.exception('There was a problem logging into Facebook', exc_info=True)
			driver.quit()
			return 'There was a problem logging into Facebook\n', 500

		#  Make the post
		try:
			driver.get('https://m.facebook.com/')
			whats_on_your_mind = driver.find_element(By.XPATH, '/html/body/div[1]/div/div[4]/div/div[1]/div[3]/div/div/div[1]/div/div[2]/div')
			post_input = whats_on_your_mind.find_element(By.XPATH, '..')
			post_input.click()
			wait.until(EC.presence_of_element_located((By.ID, 'uniqid_1')))
			post_text_area = driver.find_element(By.XPATH, '//*[@id="uniqid_1"]')
			post_text_area.send_keys(fb_post)
			wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'sharerAttachmentCaption')))
			post_btn = driver.find_element(By.XPATH, '/html/body/div[2]/div[1]/div/div[2]/div/div/div[5]/div[3]/div/div/button')
			post_btn.click()
			wait.until(EC.visibility_of_element_located((By.XPATH, "//*[contains(text(), 'Your post is now published.')]")))
			logging.info('Facebook post published successfully')
			driver.quit()
			return 'Facebook post published successfully\n', 200
		except:
			logging.exception('There was a problem sending the post text to Facebook', exc_info=True)
			driver.quit()
			return 'There was a problem sending the post text to Facebook\n', 500			
			request.send_response(200)
			request.end_headers()
			request.wfile.write(b'Ok\n')
			return

def processRequest():
	#  Define the HTTP port listener.  The listenPort will actually be determined
	#  by fbpost.socket but we have to pass something
	listenPort = ('localhost', 80)  
	httpd = HTTPServerWithInheritedSocket(listenPort, postHandler)
	
	httpd.handle_request()
	httpd.server_close()

if __name__ == '__main__':
	if os.environ.get('LISTEN_PID', None) == str(os.getpid()):
		processRequest()
		logging.info('Request processing complete')
	else:
		raise SystemExit("This script should only be run as a systemd.socket service")
